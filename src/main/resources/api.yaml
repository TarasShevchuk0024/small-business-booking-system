openapi: 3.0.3
info:
  title: Small Business Booking System API
  version: 1.0.0
  description: API for managing users, bookings, services, businesses, notifications, and authentication.
servers:
  - url: http://localhost:8080
tags:
  - name: Users
    description: Operations related to system users (registration, profile, admin view)
  - name: Businesses
    description: Operations related to managing user-owned businesses
  - name: Services
    description: Operations related to services provided by businesses
  - name: Bookings
    description: Operations related to service bookings
  - name: Notifications
    description: Operations related to sending and retrieving user notifications
  - name: Auth
    description: Authentication
  - name: Passwords
    description: Password management
paths:
  /bookings:
    post:
      tags:
        - Bookings
      summary: Create a new booking
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreate'
      responses:
        '201':
          description: Booking created
    get:
      tags:
        - Bookings
      summary: Retrieve all bookings
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: A list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        '204':
          description: No bookings found

  /bookings/{id}:
    get:
      tags:
        - Bookings
      summary: Retrieve booking by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
    put:
      tags:
        - Bookings
      summary: Update booking status
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - PENDING
                    - CONFIRMED
                    - CANCELLED
      responses:
        '200':
          description: Booking status updated
        '404':
          description: Booking not found
    delete:
      tags:
        - Bookings
      summary: Delete a booking
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Booking deleted

  /bookings/{id}/accept:
    put:
      tags:
        - Bookings
      summary: Accept a booking (set status to CONFIRMED)
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking accepted (status = CONFIRMED)
        '404':
          description: Booking not found

  /bookings/{id}/cancel:
    put:
      tags:
        - Bookings
      summary: Cancel a booking (set status to CANCELLED)
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Booking cancelled (status = CANCELLED)
        '404':
          description: Booking not found

  /users:
    post:
      tags:
        - Users
      summary: Register a new user
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
    get:
      tags:
        - Users
      summary: Retrieve all users (admin only)
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '204':
          description: No users found

  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve user by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update user by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
        '404':
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete user by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /businesses:
    post:
      tags:
        - Businesses
      summary: Create a new business
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessCreate'
      responses:
        '201':
          description: Business created
    get:
      tags:
        - Businesses
      summary: Retrieve all businesses
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: List of businesses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
        '204':
          description: No businesses found

  /businesses/{id}:
    get:
      tags:
        - Businesses
      summary: Retrieve a business by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Business details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '404':
          description: Business not found
    put:
      tags:
        - Businesses
      summary: Update a business by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUpdate'
      responses:
        '200':
          description: Business updated
        '404':
          description: Business not found
    delete:
      tags:
        - Businesses
      summary: Delete a business by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Business deleted
        '404':
          description: Business not found

  /services:
    post:
      tags:
        - Services
      summary: Create a new service
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreate'
      responses:
        '201':
          description: Service created
    get:
      tags:
        - Services
      summary: Retrieve all services
      security: [ { bearerAuth: [ ] } ]
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '204':
          description: No services found

  /services/{id}:
    get:
      tags:
        - Services
      summary: Retrieve a service by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service not found
    put:
      tags:
        - Services
      summary: Update a service by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceUpdate'
      responses:
        '200':
          description: Service updated
        '404':
          description: Service not found
    delete:
      tags:
        - Services
      summary: Delete a service by ID
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Service deleted
        '404':
          description: Service not found

  /notifications:
    post:
      tags:
        - Notifications
      summary: Create and send a notification
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreate'
      responses:
        '201':
          description: Notification created and sent

  /admins/users/login:
    post:
      tags: [ Auth ]
      summary: Admin/Users login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Wrong credentials

  /admins/users/confirm-registration:
    get:
      tags: [ Auth ]
      summary: Confirm registration
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Redirect to complete registration page
        '401':
          description: Invalid token

  /admins/users/complete-registration:
    post:
      tags: [ Auth ]
      summary: Complete registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Registration completed

  /admins/users/passwords:
    put:
      tags: [ Passwords ]
      summary: Change own password
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: Password changed
        '403':
          description: Unauthorized

  /admins/users/passwords/reset:
    put:
      tags: [ Passwords ]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent

  /admins/users/passwords/reset-verify:
    get:
      tags: [ Passwords ]
      summary: Verify password reset token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Redirect to new password UI

  /admins/users/passwords/reset-complete:
    post:
      tags: [ Passwords ]
      summary: Complete password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Password reset complete

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BookingCreate:
      type: object
      properties:
        user_id:
          type: string
        service_id:
          type: string
        date_time:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - CONFIRMED
            - CANCELLED
        created_at:
          type: string
          format: date-time
    Booking:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        service_id:
          type: string
        date_time:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - CONFIRMED
            - CANCELLED
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserCreate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone_number:
          type: string
        type:
          type: string
          enum:
            - ADMIN
            - USER
        created_at:
          type: string
          format: date-time
    UserUpdate:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone_number:
          type: string
        type:
          type: string
          enum:
            - ADMIN
            - USER
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - PENDING
        updated_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone_number:
          type: string
        type:
          type: string
          enum:
            - ADMIN
            - USER
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - PENDING
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BusinessCreate:
      type: object
      properties:
        business_name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
    BusinessUpdate:
      type: object
      properties:
        id:
          type: string
        business_name:
          type: string
        description:
          type: string
        updated_at:
          type: string
          format: date-time
    Business:
      type: object
      properties:
        id:
          type: string
        business_name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user_id:
          type: string
    ServiceCreate:
      type: object
      properties:
        service_name:
          type: string
        description:
          type: string
        duration_minutes:
          type: integer
        price_eur:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
    ServiceUpdate:
      type: object
      properties:
        id:
          type: string
        service_name:
          type: string
        description:
          type: string
        duration_minutes:
          type: integer
        price_eur:
          type: number
          format: float
        updated_at:
          type: string
          format: date-time
    Service:
      type: object
      properties:
        id:
          type: string
        service_name:
          type: string
        description:
          type: string
        duration_minutes:
          type: integer
        price_eur:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        business_id:
          type: string
    NotificationCreate:
      type: object
      properties:
        message:
          type: string
        sent_at:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - EMAIL
            - SMS
            - PUSH

    AuthCredentials:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
        password:
          type: string

    AuthToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          minLength: 1





